@use "sass:math";

body {
  width: 100%;
  height: 100%;
  margin: 0;
  background-color: #221f22;
}

td, h1, h2, a {
  background-color: #fefaf9;
  color: black;
}

th {
  display: grid;

}

td {
  display: grid;
}

tr {
  display: contents;
}

tbody {
  display: contents;
}

thead {
  display: contents;
}

table {
  display: grid;
}

button {
  font-family: monospace;
  &:hover {
    background-color: #4c454c;
    color: white;
  }
}

a:hover {
  background-color: #4c454c;
  color: white;
}

a:visited {
  // background-color: #4c454c;
}

.table1 {
  padding: 1rem;


  font-family: monospace;
  border-collapse: separate;
  border-spacing: 0 0.75rem;
}

$r: 0.5rem;

tr {
  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
}

.tr1 {
  margin: 0;

  background-color: black;
  color: white;

  & > *:first-child {
    border-radius: $r 0 0 $r;
  }
  & > *:last-child {
    border-radius: 0 $r $r 0;
  }
}

// .td1 :not(:first-child):not(:last-child) {
//   border-right: 1px dotted black;
// }

.td1 {
  border-right: 2px dashed #00000055;
}

$height: 2000;

// Function to generate multiple box-shadow values for stars
@function multiple-box-shadow($number_of_stars) {
  $value: "#{math.random($height)}px #{math.random($height)}px #FFF"; // Initial shadow
  @for $i from 2 through $number_of_stars {
    $value: "#{$value}, #{math.random($height)}px #{math.random($height)}px #FFF"; // Add more shadows
  }
  @return unquote($value); // Return the concatenated value
}


// $shadows-small: multiple-box-shadow(700); // Small stars
$shadows-medium: multiple-box-shadow(200); // Medium stars
$shadows-big: multiple-box-shadow(100); // Big stars

// $duration1: 90s;
$duration2: 100s;
$duration3: 150s;

// #stars {
//   width: 1px;
//   height: 1px;
//   border-radius: 50%;
//   box-shadow: $shadows-small; // Apply small star shadows
//   animation: animStar1 $duration1 linear infinite;
//   // animation: animStar 100s linear infinite;
//   &::after {
//     box-shadow: $shadows-small; // Apply small star shadows to pseudo-element
//   }
// }

#stars2 {
  width: 3px;
  height: 3px;
  border-radius: 50%;
  box-shadow: $shadows-medium; // Apply medium star shadows
  // animation: fadeIn 1s linear forwards, animStar 200s linear infinite, fadeOut 1s linear forwards;
  animation: animStar2 $duration2 linear infinite;
  &::after {
    width: 2px;
    height: 2px;
    box-shadow: $shadows-medium; // Apply medium star shadows to pseudo-element
  }
}

#stars3 {
  width: 5px;
  height: 5px;
  border-radius: 50%;
  box-shadow: $shadows-big; // Apply big star shadows
  animation: animStar3 $duration3 linear infinite;
  &::after {
    width: 3px;
    height: 3px;
    box-shadow: $shadows-big; // Apply big star shadows to pseudo-element
  }
}

@mixin animStar($i, $delay, $height) {
  @keyframes animStar#{$i} {
    0% {
      transform: translateY(0px);
      opacity: 0;
    }
    #{$delay} {
      opacity: 1;
    }
    #{100% - $delay} {
      opacity: 1;
    }
    100% {
      transform: translateY(calc(#{-$height / 2}px));
      opacity: 0;
    }
  }
}
// @include animStar(1, math.percentage(math.div(500ms, $duration1)),  $height);
@include animStar(2, math.percentage(math.div(500ms, $duration2)),  $height);
@include animStar(3, math.percentage(math.div(500ms, $duration3)),  $height);